//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public SemoGames.Flick.MaxFlickPowerComponent maxFlickPower { get { return (SemoGames.Flick.MaxFlickPowerComponent)GetComponent(GameComponentsLookup.MaxFlickPower); } }
    public bool hasMaxFlickPower { get { return HasComponent(GameComponentsLookup.MaxFlickPower); } }

    public void AddMaxFlickPower(float newValue) {
        var index = GameComponentsLookup.MaxFlickPower;
        var component = (SemoGames.Flick.MaxFlickPowerComponent)CreateComponent(index, typeof(SemoGames.Flick.MaxFlickPowerComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMaxFlickPower(float newValue) {
        var index = GameComponentsLookup.MaxFlickPower;
        var component = (SemoGames.Flick.MaxFlickPowerComponent)CreateComponent(index, typeof(SemoGames.Flick.MaxFlickPowerComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMaxFlickPower() {
        RemoveComponent(GameComponentsLookup.MaxFlickPower);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMaxFlickPower;

    public static Entitas.IMatcher<GameEntity> MaxFlickPower {
        get {
            if (_matcherMaxFlickPower == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MaxFlickPower);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMaxFlickPower = matcher;
            }

            return _matcherMaxFlickPower;
        }
    }
}
